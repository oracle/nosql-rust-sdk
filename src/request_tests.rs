//
// Copyright (c) 2024, 2025 Oracle and/or its affiliates. All rights reserved.
//
// Licensed under the Universal Permissive License v 1.0 as shown at
//  https://oss.oracle.com/licenses/upl/
//
use crate::get_request::*;
use crate::put_request::*;
use crate::{nson::NsonRequest, reader::Reader, types::*, writer::Writer};
use std::error::Error;
use std::time::Duration;

fn do_serialize(r: &dyn NsonRequest, w: &mut Writer, timeout: &Duration) {
    r.serialize(w, timeout);
}

#[test]
fn test_get_request() -> Result<(), Box<dyn Error>> {
    let timeout = Duration::from_millis(30000);
    let r = GetRequest::new("testusers")
        .key(MapValue::new().i32("id", 10))
        .timeout(&timeout)
        .consistency(Consistency::Eventual);
    let mut w: Writer = Writer::new();
    // TODO: r.validate();
    r.nson_serialize(&mut w, &timeout);
    // expect exactly n bytes in serialization
    assert_eq!(w.size(), 90);
    // compare bytes to data generated by java SDK
    assert_eq!(
        w.bytes(),
        [
            0x06, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x02, 0x80, 0x68, 0x06, 0x00, 0x00,
            0x00, 0x1f, 0x00, 0x00, 0x00, 0x04, 0x80, 0x76, 0x04, 0x83, 0x80, 0x6e, 0x07, 0x88,
            0x74, 0x65, 0x73, 0x74, 0x75, 0x73, 0x65, 0x72, 0x73, 0x80, 0x6f, 0x04, 0x81, 0x80,
            0x74, 0x04, 0xf9, 0x74, 0xb7, 0x80, 0x70, 0x06, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
            0x00, 0x02, 0x81, 0x63, 0x6f, 0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
            0x80, 0x79, 0x04, 0x80, 0x80, 0x6b, 0x06, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
            0x01, 0x81, 0x69, 0x64, 0x04, 0x89
        ]
    );
    //w.dump_binary();
    Ok(())
}

#[test]
fn test_get_result() -> Result<(), Box<dyn Error>> {
    // data generated by java SDK tests
    let bytes: [u8; 148] = [
        0x06, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x03, 0x80, 0x65, 0x04, 0x7f, 0x80, 0x63,
        0x06, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x03, 0x81, 0x72, 0x75, 0x04, 0x80, 0x81,
        0x72, 0x6b, 0x04, 0x80, 0x81, 0x77, 0x6b, 0x04, 0x7f, 0x80, 0x72, 0x06, 0x00, 0x00, 0x00,
        0x66, 0x00, 0x00, 0x00, 0x04, 0x81, 0x6d, 0x64, 0x05, 0xfd, 0x01, 0x88, 0x55, 0x32, 0x04,
        0x2b, 0x81, 0x78, 0x70, 0x05, 0x7f, 0x81, 0x72, 0x76, 0x01, 0xb1, 0xac, 0xed, 0x00, 0x05,
        0x77, 0x2c, 0x00, 0x1f, 0x69, 0x37, 0x5a, 0x30, 0x59, 0xdc, 0x45, 0x68, 0x90, 0x99, 0x69,
        0xbb, 0x4a, 0x15, 0x07, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x01, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x59,
        0xa4, 0x80, 0x6c, 0x06, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x81, 0x69, 0x64,
        0x04, 0x89, 0x83, 0x6e, 0x61, 0x6d, 0x65, 0x07, 0x83, 0x6a, 0x61, 0x6e, 0x65,
    ];
    let mut r = Reader::new().from_bytes(&bytes);
    let resp = GetRequest::nson_deserialize(&mut r)?;
    println!("GetResult: row={:?}", resp.row);
    // TODO: check row returned
    Ok(())
}
#[test]
fn test_put_request() -> Result<(), Box<dyn Error>> {
    let timeout = Duration::from_millis(30000);
    let mut mv = MapValue::new();
    mv = mv.str("name", "jane").i32("id", 20);
    let r = PutRequest::new("testusers")
        .timeout(&timeout)
        .value(mv)
        .ttl(&Duration::new(7200, 0));
    let mut w: Writer = Writer::new();
    do_serialize(&r, &mut w, &timeout);
    // expect exactly N bytes
    assert_eq!(w.size(), 102);
    // compare to nson standard for request (generated from java SDK)
    // TODO: this currently fails...
    //assert_eq!(w.bytes(), [0x06,0x00,0x00,0x00,0x6b,0x00,0x00,0x00,0x02,0x80,0x68,0x06,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x04,0x80,0x76,0x04,0x83,0x80,0x6e,0x07,0x88,0x74,0x65,0x73,0x74,0x75,0x73,0x65,0x72,0x73,0x80,0x6f,0x04,0x82,0x80,0x74,0x04,0xf9,0x74,0xb7,0x80,0x70,0x06,0x00,0x00,0x00,0x3a,0x00,0x00,0x00,0x05,0x81,0x64,0x75,0x04,0x7f,0x81,0x72,0x72,0x02,0x00,0x81,0x75,0x74,0x02,0x01,0x81,0x74,0x74,0x07,0x86,0x32,0x20,0x48,0x4f,0x55,0x52,0x53,0x80,0x6c,0x06,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x02,0x83,0x6e,0x61,0x6d,0x65,0x07,0x83,0x6a,0x61,0x6e,0x65,0x81,0x69,0x64,0x04,0x93]);
    // w.dump_binary();
    Ok(())
}

#[test]
fn test_put_result() -> Result<(), Box<dyn Error>> {
    // data generated by java SDK tests
    // This has CONSUMED RETURN_INFO
    let bytes: [u8; 145] = [
        0x6, 0x0, 0x0, 0x0, 0x8c, 0x0, 0x0, 0x0, 0x3, 0x80, 0x65, 0x4, 0x7f, 0x80, 0x63, 0x6, 0x0,
        0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x3, 0x81, 0x72, 0x75, 0x4, 0x81, 0x81, 0x72, 0x6b, 0x4,
        0x80, 0x81, 0x77, 0x6b, 0x4, 0x7f, 0x81, 0x72, 0x69, 0x6, 0x0, 0x0, 0x0, 0x62, 0x0, 0x0,
        0x0, 0x3, 0x81, 0x65, 0x6c, 0x6, 0x0, 0x0, 0x0, 0x14, 0x0, 0x0, 0x0, 0x2, 0x81, 0x69, 0x64,
        0x4, 0x93, 0x83, 0x6e, 0x61, 0x6d, 0x65, 0x7, 0x83, 0x6a, 0x61, 0x6e, 0x65, 0x81, 0x65,
        0x6d, 0x5, 0xfd, 0x1, 0x8b, 0x63, 0x26, 0x37, 0x7a, 0x81, 0x65, 0x76, 0x1, 0xb1, 0xac,
        0xed, 0x0, 0x5, 0x77, 0x2c, 0x0, 0x21, 0x92, 0xf, 0xa8, 0x5a, 0x8e, 0x96, 0x4f, 0xf8, 0x86,
        0xad, 0xc4, 0xd3, 0xa4, 0x53, 0xff, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0x1, 0x3,
        0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xcd, 0x7e,
    ];
    let mut r = Reader::new().from_bytes(&bytes);
    let resp = PutRequest::nson_deserialize(&mut r)?;
    println!("PutResult: cons={:?}", resp.consumed);
    // TODO: check row returned
    // This has CONSUMED ROW_VERSION GENERATED
    let bytes1: [u8; 99] = [
        0x6, 0x0, 0x0, 0x0, 0x5e, 0x0, 0x0, 0x0, 0x4, 0x80, 0x65, 0x4, 0x7f, 0x80, 0x63, 0x6, 0x0,
        0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x3, 0x81, 0x72, 0x75, 0x4, 0x7f, 0x81, 0x72, 0x6b, 0x4,
        0x7f, 0x81, 0x77, 0x6b, 0x4, 0x80, 0x81, 0x72, 0x76, 0x1, 0xb1, 0xac, 0xed, 0x0, 0x5, 0x77,
        0x2c, 0x0, 0x21, 0x92, 0xf, 0xa8, 0x5a, 0x8e, 0x96, 0x4f, 0xf8, 0x86, 0xad, 0xc4, 0xd3,
        0xa4, 0x53, 0xff, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x7c, 0x1, 0x3, 0x0, 0x0, 0x0,
        0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x5f, 0x4a, 0x81, 0x67, 0x6e, 0x5,
        0x80,
    ];
    let mut r1 = Reader::new().from_bytes(&bytes1);
    let resp1 = PutRequest::nson_deserialize(&mut r1)?;
    println!("PutResult: cons={:?}", resp1.consumed);
    Ok(())
}
